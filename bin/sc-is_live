#!/usr/bin/env bash

# Script version
VERSION=0.0.1

FILENAME=$(basename $0)

# Constants
API_URL="https://decapi.me/twitch/uptime"
OFFLINE_EMOJI="‚ö´"
ONLINE_EMOJI="üî¥"
UNKNOWN_EMOJI="‚ùì"

CACHE_PREFIX="${HOME}/.cache/is_live"
CACHE_FILE="${CACHE_PREFIX}/state.json"

# Default variables
CHANNEL=""
DISPLAY_NAME=""
NOTIFICATION="false"

function print_help() {
    cat <<EOF
$FILENAME
Version $VERSION

Optional arguments
  -h        Show this help message
  -c        Twitch channel name
  -d        Display name
  -v        Print the script version
  -n        Enable notification when the streamer is live
EOF
}

function parse() {
    while getopts "c:d:hvn" arg; do
        case $arg in
            c)
                if [[ ${#OPTARG} -le 1 ]]; then
                    echo "Invalid channel name length (c >= 2)"
                    return 1
                fi

                CHANNEL=$OPTARG
                [[ -z $DISPLAY_NAME ]] && DISPLAY_NAME=$CHANNEL
                ;;
            
            d)
                DISPLAY_NAME=$OPTARG
                ;;

            n)
                NOTIFICATION="true"

                if [[ ! -f $CACHE_FILE ]]; then
                    mkdir -p $CACHE_PREFIX
                    echo "{}" > $CACHE_FILE
                fi
                ;;

            h)
                print_help
                exit 0
                ;;

            v)
                echo $FILENAME -- $VERSION
                exit 0
                ;;
        esac    
    done
}

# i3blocks button event support
function handle_button() {
    case $BLOCK_BUTTON in
        1) xdg-open "https://twitch.tv/$CHANNEL" > /dev/null &;;
        3) notify-send "üëÄ Streamer status module" "\- Left click to open the browser
$OFFLINE_EMOJI: Streamer is offline
$ONLINE_EMOJI: Streamer is online
$UNKNOWN_EMOJI: Unknown satus

‚úâÔ∏è Send a notification when the streamer is online" ;;
    esac
}

# $1 -> current streamer emoji aka status
function _resolve_emoji() {
    if [[ "$1" == "$ONLINE_EMOJI" ]]; then
        echo "true"
    else
        echo "false"
    fi
}

# $1 -> Twitch channel name
# $2 -> $ONLINE_EMOJI | $OFFLINE_EMOJI | $UNKNOWN_EMOJI
function cache_channel() {
    local exist=$(cat "$CACHE_FILE" | \
        jq "has(\"$1\")"
    )
    local state=$(_resolve_emoji "$2")
    local udpated_obj=$(cat "$CACHE_FILE" | \
        jq ".$1 = $state"
    )

    if [[ "$exist" == "false" ]]; then
        echo "$udpated_obj" > $CACHE_FILE

        [[ "$state" == "true" ]] && return 0
    fi

    local value=$(cat "$CACHE_FILE" \
        | jq ".$1"
    )

    echo "$udpated_obj" > $CACHE_FILE
    
    if [[
        "$value" == "false" && \
        "$state" == "true"
    ]]; then
        return 0
    fi

    return 1
}

# $1 -> Twitch channel name
# $2 -> $ONLINE_EMOJI | $OFFLINE_EMOJI | $UNKNOWN_EMOJI
function send_notification() {
    cache_channel $@ || return

    notify-send \
        -u critical \
        "üëÄ $DISPLAY_NAME is streaming !"
}

function print_status() {
    local res=$(curl --silent $API_URL/$CHANNEL)
    local emoji=""

    if [[ $res =~ "offline" ]]; then
        emoji=$OFFLINE_EMOJI
    elif [[ $res =~ "seconds" ]]; then
        emoji=$ONLINE_EMOJI
    else
        emoji=$UNKNOWN_EMOJI
    fi
    
    if [[ "$NOTIFICATION" == "true" ]]; then
        send_notification $CHANNEL $emoji
    fi

    echo "$emoji $DISPLAY_NAME"
}

function main() {
    parse $@ || exit 1

    handle_button

    [[ -z $CHANNEL ]] && exit 1
    print_status
}

main $@
