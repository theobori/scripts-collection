#!/usr/bin/env bash

RESOLVED_DIR=$(dirname $(realpath ${0}))

source "${RESOLVED_DIR}/../lib/sc-curses"

# Script version
readonly VERSION=0.0.1

readonly FILENAME=$(basename ${0})

# Terminal global infos
readonly COLORS=$(tput colors)
readonly MAX_W=$(tput cols)
readonly MAX_H=$(tput lines)

# Default vars
COLOR=255
INTERVAL=0.07
RAINBOW=0
BLOCK="\xe2\x96\x88"
ERASER="\x20"

# Snake vars
FOOD=("-1" "-1") # x y
DIRECTION=(1 0) # x y
X=(0)
Y=(0)

function print_help() {
    cat <<USAGE
${FILENAME}
Version ${VERSION}

Optional arguments
  -h        Show this help message
  -c        Choose a color between 0 and ${COLORS}
  -v        Print the script version
  -t        Timing the snake
  -r        Every block has a random color
  -s        Snake base size
USAGE
}

function parse() {
    local -r max_size=$(expr ${MAX_W} / 2)

    while getopts "c:s:t:hvr" arg; do
        case ${arg} in
            c)
                if [[ ${OPTARG} -lt 0 || ${OPTARG} -gt ${COLORS} ]]; then
                    echo "Invalid color (0 <= c <= 256)"
                    return 1
                fi

                COLOR=${OPTARG}
                ;;
            
            s)
                if [[ ${OPTARG} -le 0 || ${OPTARG} -gt ${max_size} ]]; then
                    echo "Invalid size (0 <= s <= ${max_size})"
                    return 1
                fi

                X=($(seq 1 ${OPTARG}))
                for (( i = 1; i < ${OPTARG}; i++ )); do
                    Y+=(0);
                done
                ;;

            t)
                INTERVAL=${OPTARG}
                ;;

            r)
                RAINBOW=1
                ;;

            h)
                print_help
                exit 0
                ;;
            
            v)
                echo ${FILENAME} -- ${VERSION}
                exit 0
                ;;
            
            *)
                return 0
            ;;
        esac
    done
}

# Read a key then send signal to the subprocess
# Take only one argument, ${1} -> PID
function handle_key() {
    read -n1 pressed_key

    case ${pressed_key} in
        z | Z)
            kill -SIGALRM ${1}
            ;;

        q | Q)
            kill -SIGUSR1 ${1}
            ;;

        s | S)
            kill -SIGUSR2 ${1}
            ;;

        d | D)
            kill -SIGBUS ${1}
            ;;
    esac
}

function handle_keys() {
    while :; do
        handle_key ${1}
    done
}

function random_food() {
    local -r x=$((RANDOM % ${MAX_W}))
    local -r y=$((RANDOM % ${MAX_H}))

    FOOD=(${x} ${y})
}

function print_head() {
    if [[ ${RAINBOW} -eq 1 ]]; then
        COLOR=$((RANDOM % ${COLORS}))
    fi

    printf "$(tput cup ${Y[-1]} ${X[-1]})\e[38;5;${COLOR}m${BLOCK}"
}

function clear_screen() {
    # Erase the tail
    printf "$(tput cup ${Y[0]} ${X[0]})${ERASER}"
}

function update() {
    # Check death
    check_death $$ &

    # Check if the food is eaten
    if [[ 
        ${X[-1]} -eq ${FOOD[0]} && \
        ${Y[-1]} -eq ${FOOD[1]} 
    ]]; then
        X=(0 ${X[@]})
        Y=(0 ${Y[@]})
        FOOD=("-1" "-1")
    fi

    # Generate a new food
    if [[
        ${FOOD[1]} -eq "-1" && \
        ${FOOD[0]} -eq "-1"
    ]]; then
            random_food
    fi

    # Append a ${BLOCK} to the head
    X+=($(expr ${X[-1]} + ${DIRECTION[0]}))
    Y+=($(expr ${Y[-1]} + ${DIRECTION[1]}))

    # Pop the tail
    X=("${X[@]:1}")
    Y=("${Y[@]:1}")

    # Check out of bounds
    [[ ${X[-1]} -lt 0 ]] && X[-1]=$(expr ${MAX_W} - 1)
    [[ ${X[-1]} -gt $(expr ${MAX_W} - 1) ]] && X[-1]=0
    [[ ${Y[-1]} -lt 0 ]] && Y[-1]=$(expr ${MAX_H} - 1)
    [[ ${Y[-1]} -gt $(expr ${MAX_H} - 1) ]] && Y[-1]=0
}

function print_screen() {
    print_head
    printf "$(tput cup ${FOOD[1]} ${FOOD[0]})\e[38;5;255m${BLOCK}"
}

function snake_init() {
    trap "DIRECTION=(0 -1)" SIGALRM 
    trap "DIRECTION=(-1 0)" SIGUSR1
    trap "DIRECTION=(0 1)" SIGUSR2
    trap "DIRECTION=(1 0)" SIGBUS
    trap "curses_end" SIGXFSZ
}

# Sub process
function snake() {
    snake_init

    while :; do
        clear_screen
        update
        print_screen

        sleep ${INTERVAL}
    done
}

function cleanup() {
    # Killing sub processes
    kill $(jobs -pr)

    curses_end
}

# Overriding curses_init from `./curses.sh`
function curses_init() {
    stty -echo
    tput smcup
    tput civis
    tput clear

    trap cleanup HUP TERM WINCH EXIT SIGINT SIGTERM SIGXFSZ
}

# It is supposed to be a subprocess too
function check_death() {
    for (( i = 0; i < $(expr ${#X[@]} - 1) ; i++ )); do
        if [[
            ${X[-1]} -eq ${X[${i}]} && \
            ${Y[-1]} -eq ${Y[${i}]}
        ]]; then
            kill -SIGXFSZ ${1}
        fi
    done
}

function main() {
    parse ${@} || exit 1

    curses_init
    
    snake &
    handle_keys ${!}

    curses_reset
}

main ${@}
