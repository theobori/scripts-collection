#!/usr/bin/env bash

set -e

# This script is a supposed better version that this old old one https://github.com/theobori/wall.sh/blob/main/wall.sh

readonly RESOLVED_DIR=$(dirname $(realpath ${0}))

source "${RESOLVED_DIR}/../lib/sc-curses"
source "${RESOLVED_DIR}/../lib/sc-utils"

# Script version
readonly VERSION=0.2.0

readonly FILENAME=$(basename ${0})

# Terminal global infos
readonly COLORS=$(tput colors)
readonly MAX_W=$(tput cols)
readonly MAX_H=$(tput lines)
readonly MAX_BLOCKS=$((${MAX_H} * ${MAX_W}))

BLOCK="\xe2\x96\x88"

# Default vars
COLOR=255
BLOCK_SIZE=1
INTERVAL=0.01
RAINBOW=0

function print_help() {
    cat <<EOF
${FILENAME}
Version ${VERSION}

Optional arguments
  -h, --help        Show this help message
  -c, --color       Choose a color between 0 and ${COLORS}
  -v, --version     Print the script version
  -s, --size        Block size between 2 and your terminal max width (${MAX_W})
  -b, --block       Block symbol, the max lenght is 1
  -i, --interval    Interval before printing a block
  -r, --rainbow     Every block has a random color
EOF
}

function parse_cli_arguments() {
    while test $# -gt 0; do
        case ${1} in
            "-c" | "--color")
                if [[ ${2} -lt 0 || ${2} -gt ${COLORS} ]]; then
                    echo "Invalid color (0 <= c <= 256)"
                    return 1
                fi

                COLOR=${2}

                shift 2
                ;;

            "-s" | "--size")
                if [[ ${2} -lt 1 || ${2} -gt ${MAX_W} ]]; then
                    echo "Invalid block size (1 <= b <= ${MAX_W})"
                    return 1
                fi

                BLOCK_SIZE=${2}

                shift 2
                ;;
            
            "-b" | "--block")
                if [[ ${#2} -ne 1 ]]; then
                    echo "Invalid block symbol length (must be 1)"
                    return 1
                fi

                BLOCK=${2}
        
                shift 2
                ;;

            "-i" | "--interval")
                INTERVAL=${2}
        
                shift 2
                ;;

            "-r" | "--rainbow")
                RAINBOW=1

                shift
                ;;

            "-h" | "--help")
                print_help
                exit 0
                ;;
            
            "-v" | "--version")
                echo ${FILENAME} -- ${VERSION}
                exit 0
                ;;
            
            "--" )
                break
                ;;
            
            *)
                return 1
            ;;
        esac
    done
}

function build_wall() {
    local x=${1}
    local y=${2}
    local -r max=$(expr ${MAX_BLOCKS} / ${BLOCK_SIZE})

    for (( i = 0; i < ${max} ; i++ )); do
        if [[ $(expr ${x} + ${BLOCK_SIZE}) -gt ${MAX_W} ]]; then
            x=0
            y=$(expr ${y} + 1)
            echo
        fi

        if [[ ${RAINBOW} -eq 1 ]]; then
            COLOR=$((RANDOM % ${COLORS}))
        fi

        printf "$(tput cup ${y} ${x})\e[38;5;${COLOR}m${BLOCK}"
        sleep ${INTERVAL}

        x=$(expr ${x} + ${BLOCK_SIZE})
    done
}

function main() {
    parse_cli_arguments ${@} || exit 1

    BLOCK=$(repeat_string ${BLOCK} ${BLOCK_SIZE})
    BLOCK_ERASER=$(repeat_string "\x20" ${BLOCK_SIZE})
    local -r tmp=${BLOCK}

    curses_init
    
    while :; do
        build_wall 0 ${MAX_H}

        BLOCK=${BLOCK_ERASER}
        build_wall 0 0
        BLOCK=${tmp}
    done
    
    curses_reset
}

main ${@}
